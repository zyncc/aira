name: Build and Deploy Aira to Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Checkout your repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx for building the image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Log in to the Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Generate a consistent encryption key for build-time and run-time
      - name: Generate Encryption Key
        id: generate_key
        run: echo "key=$(openssl rand -hex 32)" >> $GITHUB_OUTPUT

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Transfer compose.yaml to the Server
        run: |
          scp -i ~/.ssh/id_rsa compose.yaml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~

      - name: Create .env file on server and delete old docker images
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cat > .env << EOL
          IMAGE_KIT_PUBLIC_API_KEY=${{ secrets.IMAGE_KIT_PUBLIC_API_KEY }}
          IMAGE_KIT_PRIVATE_API_KEY=${{ secrets.IMAGE_KIT_PRIVATE_API_KEY }}
          IMAGE_KIT_URL_ENDPOINT=${{ secrets.IMAGE_KIT_URL_ENDPOINT }}
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          DELHIVERY_TOKEN=${{ secrets.DELHIVERY_TOKEN }}
          WHATSAPP_PHONE_NUMBER=${{ secrets.WHATSAPP_PHONE_NUMBER }}
          WHATSAPP_CLOUD_API_KEY=${{ secrets.WHATSAPP_CLOUD_API_KEY }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          TWITTER_CLIENT_ID=${{ secrets.TWITTER_CLIENT_ID }}
          TWITTER_CLIENT_SECRET=${{ secrets.TWITTER_CLIENT_SECRET }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
          NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
          BETTER_AUTH_SECRET=${{ secrets.BETTER_AUTH_SECRET }}
          BETTER_AUTH_URL=${{ secrets.BETTER_AUTH_URL }}
          NEXT_PUBLIC_RAZORPAY_KEY_ID=${{ secrets.NEXT_PUBLIC_RAZORPAY_KEY_ID }}
          RAZORPAY_KEY_SECRET=${{ secrets.RAZORPAY_KEY_SECRET }}
          RAZORPAY_WEBHOOK_SECRET=${{ secrets.RAZORPAY_WEBHOOK_SECRET }}
          GITHUB_SHA=${{ github.sha }}
          NODE_ENV=${{ secrets.NODE_ENV }}
          EOL

          echo "Pruning old Docker images..."
          docker image prune -f
          EOF

      # 5. Build and push the Docker image with a unique tag
      - name: Build and Push Docker Image
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: zyncc/aira:${{ github.sha }}
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
            NEXT_SERVER_ACTIONS_ENCRYPTION_KEY=${{ steps.generate_key.outputs.key }}
